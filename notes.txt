1) time complexity 
2) space complexity


x=10

int k=10
int k1=10
int k2=10

20 byte * 100000 -> 20,00,000 byte 
    -> 2000 MB
    -> 2 GB 

----------------------------------------------------

		DS
Linear 			NonLinear
Array 			Tree
Stack 			Graph 
Queue 
LinkedList
 
	Sort :-b,s,i,m,q,heap  
	Search:-linear,binary 





array : sum 

SIZE = 50 -> 25 
100 -> 50 

n/2 
 
 O(n/2)


 O(1) : constant 





search 

1...50 

25 



login facebook -> 
    
------------------------------------------------------------------------------    

array -> n number items 
		 static 
		 
int a[5]; //4*5=>20

DMA 

10 -> 
3->2 


0:2000 2001 2002 2003
1:2004
2:2008
3:2012
4:2016 
----------------------------------------------------

function 

void add(){
	scanf -> console
	printf(10); 
}

add(); // call 


int add(){

	return 10; 
}

ans = add(); 


int add(int x,int y){
	return x+y; 
}

add(10,20);
-----------------------------------------------------


STACK -> LiFo -> Last In First Out 

ticket -> 

ctrl+z -> stack 


  

display 
40
30
30
10


----------------------------------------
take a string from user and reverse it. [ stack ]


o/p
	enter string 
	royal 
	reverse: layor 


o/p
	enter string 
	sir 
	reverse: ris 
------------------------------------------	

searching :- 
	1) linear search 
	2) binary search 

h.w -> time complexity of binary search 
------------------------------------------

sorting -> 

	bubble sort -> 
	selection sort ->
	insertion sort -> 
	merge sort 1 -> 

------------------------------------------------------------------
			

STACK :: QUEUE 

3456 
0121223 
010101b 

0xAA
0X123 


hexaValidtor -> 

0x  0-9 A-F  
0X
valid 

Enter the String : 
0xAAA
Valid 

 
Enter the String : 
0xAAAW
InValid 


Enter the String : 
0x
InValid 

Enter the String : 
0x0
Valid 

Enter the String : 
0xAAA343432323BCDFA12123
Valid 

Enter the String : 
royal
InValid 


-----------------------------------------------------------

5 numbers -> 
array -> 

empName 
department 
basicSalary 
allowance:1500[+]
hra:7%[+] 
tax:10%[-] 
salary 

7*50=350 


struct {

};




struct  employee{

};

------------------------------------------
dma 

calloc()
malloc() 

we can allocate memory 

free() 


c++ 
new  and delete 
----------------------------------------------------------------------

struct student{

	char name[20];
	char course[20];
	char batch[20];
};


struct student s[50]; 


5 student -> 45*

60 student -> 10* 

--------------------------------------------------------------------------
calloc 
malloc 

stdlib.h 

int a; // 4 byte, malloc 

int a[10] ;//4 byte * 10 , calloc

???


pointer 

int *a; //single variable 
int *p;//array 

a  = malloc(sizeof(int)); 


dMA ->array 
print and scan 
sum of all elements 
sorting -> bubble
print 


dma->structure 



DMA 
int a[];

class 

new => 



--------------------------------------------------------------------------

DMA -> 
	calloc 
	malloc 


	int a[4]; //4 elements 4 byte => 16 byte -> memory allocated 

	//0 1 => 2 elements => 2 X 

	//0 1 2 3 4 5 6 => overflow 

	//a[3] -> 3 use => 

	//50 line code 



stdlib.h 
	1) calloc : 5byte 50 block  {250byte,slice50}
	2) malloc : 1 lblock -> size {250byte} 
	3) realloc 
	4) free 



int x; 


int *x;//malloc  


int *x;//array ->calloc

-------------------------------------------------------------------------


























































